[
    {
        "command": "set_dont_touch",
        "description": "Prevents the synthesis tool from optimizing or moving specified instances or nets.",
        "value_type": "{string}",
        "constraint_type": "standard cell",
        "syntax": "set_dont_touch <object_names>"
    },
    {
        "command": "set_dont_use",
        "description": "Specifies library cells that the synthesis tool should not use.",
        "value_type": "{string}",
        "constraint_type": "standard cell",
        "syntax": "set_dont_use <cell_names>"
    },
    {
        "command": "set_driving_cell",
        "description": "Assigns a driving cell to an input port to model its drive strength.",
        "value_type": "{string, float}",
        "constraint_type": "standard cell",
        "syntax": "set_driving_cell -lib_cell <cell_name> -pin <pin_name> -input_port <port_name>"
    },
    {
        "command": "set_drive",
        "description": "Specifies the drive strength of an input port.",
        "value_type": "{float}",
        "constraint_type": "standard cell",
        "syntax": "set_drive <strength> <port_name>"
    },
    {
        "command": "set_load",
        "description": "Specifies load on an output port or net.",
        "value_type": "{float}",
        "constraint_type": "standard cell",
        "syntax": "set_load <load_value> <port_or_net_name>"
    },
    {
        "command": "set_fanout_load",
        "description": "Specifies the expected fanout load for an output pin.",
        "value_type": "{float}",
        "constraint_type": "standard cell",
        "syntax": "set_fanout_load <load_value> <pin_name>"
    },
    {
        "command": "set_connection_class",
        "description": "Specifies the connection class for ports or pins to guide compilation efforts.",
        "value_type": "{string}",
        "constraint_type": "standard cell",
        "syntax": "set_connection_class -class <class_name> <port_or_pin_names>"
    },
    {
        "command": "set_case_analysis",
        "description": "Forces a particular logical value on specific nets or ports during timing analysis.",
        "value_type": "{bool}",
        "constraint_type": "standard cell",
        "syntax": "set_case_analysis <value> <net_or_port_name>"
    },
    {
        "command": "set_leakage_optimization",
        "description": "Optimizes cells for leakage power without degrading performance significantly.",
        "value_type": "None",
        "constraint_type": "standard cell",
        "syntax": "set_leakage_optimization"
    },
    {
        "command": "set_multi_vth_constraint",
        "description": "Applies threshold voltage constraints to optimize for power, speed, or area.",
        "value_type": "{string}",
        "constraint_type": "standard cell",
        "syntax": "set_multi_vth_constraint <constraint_type>"
    },
    {
        "command": "create_clock",
        "description": "Defines a clock.",
        "value_type": "{string, float}",
        "constraint_type": "timing",
        "syntax": "create_clock -name <clock_name> -period <clock_period> <pin_or_net>"
    },
    {
        "command": "create_generated_clock",
        "description": "Defines a clock that is generated by the design.",
        "value_type": "{string, string, float}",
        "constraint_type": "timing",
        "syntax": "create_generated_clock -name <clock_name> -source <source_clock> -divide_by <divider> <pin_or_net>"
    },
    {
        "command": "set_clock_uncertainty",
        "description": "Specifies uncertainty for clock timing.",
        "value_type": "{float}",
        "constraint_type": "timing",
        "syntax": "set_clock_uncertainty <uncertainty_value> -from <source_clock> -to <destination_clock>"
    },
    {
        "command": "set_clock_latency",
        "description": "Defines clock latency.",
        "value_type": "{float, string}",
        "constraint_type": "timing",
        "syntax": "set_clock_latency <latency_value> -source| -network <clock_name>"
    },
    {
        "command": "set_clock_transition",
        "description": "Sets clock transition times.",
        "value_type": "{float}",
        "constraint_type": "timing",
        "syntax": "set_clock_transition <transition_time> <clock_name>"
    },
    {
        "command": "set_input_delay",
        "description": "Specifies input delay with respect to a clock.",
        "value_type": "{float, string}",
        "constraint_type": "timing",
        "syntax": "set_input_delay <delay_value> -clock <clock_name> <port_name>"
    },
    {
        "command": "set_output_delay",
        "description": "Specifies output delay with respect to a clock.",
        "value_type": "{float, string}",
        "constraint_type": "timing",
        "syntax": "set_output_delay <delay_value> -clock <clock_name> <port_name>"
    },
    {
        "command": "set_max_delay",
        "description": "Sets the maximum delay for a path.",
        "value_type": "{float, string, string}",
        "constraint_type": "timing",
        "syntax": "set_max_delay <delay_value> -from <source_objects> -to <destination_objects>"
    },
    {
        "command": "set_min_delay",
        "description": "Sets the minimum delay for a path.",
        "value_type": "{float, string, string}",
        "constraint_type": "timing",
        "syntax": "set_min_delay <delay_value> -from <source_objects> -to <destination_objects>"
    },
    {
        "command": "set_false_path",
        "description": "Specifies a false timing path.",
        "value_type": "{string, string}",
        "constraint_type": "timing",
        "syntax": "set_false_path -from <source_objects> -to <destination_objects>"
    },
    {
        "command": "set_multicycle_path",
        "description": "Sets up a multi-cycle path.",
        "value_type": "{int, string, string}",
        "constraint_type": "timing",
        "syntax": "set_multicycle_path <cycle_count> -from <source_objects> -to <destination_objects>"
    },
    {
        "command": "set_clock_groups",
        "description": "Groups clocks together to define timing relationships.",
        "value_type": "{string}",
        "constraint_type": "timing",
        "syntax": "set_clock_groups -group <clock_names> -exclusive"
    },
    {
        "command": "set_propagated_clock",
        "description": "Defines clocks to be propagated during synthesis.",
        "value_type": "None",
        "constraint_type": "timing",
        "syntax": "set_propagated_clock <clock_name>"
    },
    {
        "command": "set_max_time_borrow",
        "description": "Defines the maximum time borrowing for a sequential path.",
        "value_type": "{float}",
        "constraint_type": "timing",
        "syntax": "set_max_time_borrow <time> <clock_name>"
    },
    {
        "command": "set_max_transition",
        "description": "Specifies the maximum transition time on a net.",
        "value_type": "{float}",
        "constraint_type": "timing",
        "syntax": "set_max_transition <transition_time> <net_name>"
    },
    {
        "command": "set_max_skew",
        "description": "Sets the maximum skew allowed between clock signals.",
        "value_type": "{float}",
        "constraint_type": "timing",
        "syntax": "set_max_skew <skew_time> <clock_names>"
    },
    {
        "command": "set_bus_skew",
        "description": "Manages skew within buses to meet setup and hold times.",
        "value_type": "{float, string}",
        "constraint_type": "timing",
        "syntax": "set_bus_skew <skew_time> <bus_name>"
    },
    {
        "command": "set_hold_fixing",
        "description": "Adjusts the design to fix hold timing violations.",
        "value_type": "None",
        "constraint_type": "timing",
        "syntax": "set_hold_fixing"
    },
    {
        "command": "set_fix_hold",
        "description": "Synonym for hold time adjustments in certain tool versions.",
        "value_type": "None",
        "constraint_type": "timing",
        "syntax": "set_fix_hold"
    },
    {
        "command": "set_min_pulse_width",
        "description": "Ensures signals meet the minimum pulse width requirements.",
        "value_type": "{float}",
        "constraint_type": "timing",
        "syntax": "set_min_pulse_width <width> <signal_names>"
    },
    {
        "command": "set_signal_integrity_effort",
        "description": "Specifies the level of effort the tool should use to analyze and correct signal integrity issues.",
        "value_type": "{string}",
        "constraint_type": "timing",
        "syntax": "set_signal_integrity_effort <effort_level>"
    },
    {
        "command": "set_power_optimization",
        "description": "Enables or configures various power optimization techniques such as gate resizing, Vt swapping, or power gating.",
        "value_type": "{string}",
        "constraint_type": "optimization",
        "syntax": "set_power_optimization <method>"
    },
    {
        "command": "set_area_group",
        "description": "Defines area constraints for specific groups of cells to control placement density or meet floorplanning requirements.",
        "value_type": "{string}",
        "constraint_type": "optimization",
        "syntax": "set_area_group <group_name> <cell_names>"
    },
    {
        "command": "set_global_optimization",
        "description": "Enables or tunes global optimization features that cross module boundaries.",
        "value_type": "None",
        "constraint_type": "optimization",
        "syntax": "set_global_optimization"
    },
    {
        "command": "set_max_area",
        "description": "Specifies the maximum allowable area.",
        "value_type": "{float}",
        "constraint_type": "optimization",
        "syntax": "set_max_area <area_value>"
    },
    {
        "command": "set_max_fanout",
        "description": "Specifies the maximum allowable fanout per gate.",
        "value_type": "{int, (string)}",
        "constraint_type": "optimization",
        "syntax": "set_max_fanout <fanout_value> [instance_name]"
    },
    {
        "command": "set_max_capacitance",
        "description": "Specifies the maximum capacitance on a net.",
        "value_type": "{float}",
        "constraint_type": "optimization",
        "syntax": "set_max_capacitance <capacitance_value> <net_name>"
    },
    {
        "command": "set_min_capacitance",
        "description": "Sets the minimum capacitance requirements for a net.",
        "value_type": "{float}",
        "constraint_type": "optimization",
        "syntax": "set_min_capacitance <capacitance_value> <net_name>"
    },
    {
        "command": "set_timing_derate",
        "description": "Derates timing by a certain factor to account for variations.",
        "value_type": "{float, string}",
        "constraint_type": "optimization",
        "syntax": "set_timing_derate <factor> -cell| -net| -path <name>"
    },
    {
        "command": "set_cost_priority",
        "description": "Prioritizes certain areas of the design when balancing constraints.",
        "value_type": "{int}",
        "constraint_type": "optimization",
        "syntax": "set_cost_priority <priority_level> <design_areas>"
    },
    {
        "command": "disable_cost_function",
        "description": "Turns off cost functions to focus on other optimization goals.",
        "value_type": "None",
        "constraint_type": "optimization",
        "syntax": "disable_cost_function"
    },
    {
        "command": "set_cell_degradation",
        "description": "Adjusts the cell degradation parameters for aging effects.",
        "value_type": "{float}",
        "constraint_type": "optimization",
        "syntax": "set_cell_degradation <percentage> <cell_names>"
    },
    {
        "command": "set_auto_disable_drc_nets",
        "description": "Automatically disables DRC for certain nets to improve synthesis outcomes.",
        "value_type": "{string}",
        "constraint_type": "optimization",
        "syntax": "set_auto_disable_drc_nets <condition>"
    }
]
