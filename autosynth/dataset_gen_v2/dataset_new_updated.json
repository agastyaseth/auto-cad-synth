[
    {
        "command": "set_dont_touch",
        "description": "Prevents the synthesis tool from optimizing or moving specified instances or nets.",
        "value_type": "{object}",
        "constraint_type": "Standard cell",
        "syntax": "set_dont_touch <objects>",
        "query": "Given the following TCL file, optimize for high performance by preventing the synthesis tool from optimizing or moving the {object} instance or net. Use the `set_dont_touch` command for this purpose.",
        "ppa_constraint": "high performance",
        "query_examples": [
            "Sure! Here are 10 different example values for the command 'set_dont_touch' with value type '{object}':",
            "",
            "1. computer_monitor",
            "2. coffee_mug",
            "3. hiking_boots",
            "4. office_chair",
            "5. picture_frame",
            "6. potted_plant",
            "7. wrist_watch",
            "8. soccer_ball",
            "9. sunglasses",
            "10. backpack"
        ],
        "final_commands": [
            "set_dont_touch [get_objects computer_monitor]",
            "set_dont_touch [get_objects coffee_mug]",
            "set_dont_touch [get_objects hiking_boots]",
            "set_dont_touch [get_objects office_chair]",
            "set_dont_touch [get_objects picture_frame]",
            "set_dont_touch [get_objects potted_plant]",
            "set_dont_touch [get_objects wrist_watch]",
            "set_dont_touch [get_objects soccer_ball]",
            "set_dont_touch [get_objects sunglasses]",
            "set_dont_touch [get_objects backpack]"
        ]
    },
    {
        "command": "set_dont_use",
        "description": "Specifies library cells that the synthesis tool should not use.",
        "value_type": "{cell_names}",
        "constraint_type": "Standard cell",
        "syntax": "set_dont_use <cell_names>",
        "query": "Given the following TCL file, optimize for low power consumption by specifying that the synthesis tool should not use the {cell_name} cell.",
        "ppa_constraint": "low power consumption",
        "query_examples": [
            "Here are 10 different example values for the command 'set_dont_use' with value type '{cell_names}':",
            "",
            "1. set_dont_use: {A1, B2, C3}",
            "2. set_dont_use: {X4, Y5, Z6}",
            "3. set_dont_use: {Sales, Marketing, HR}",
            "4. set_dont_use: {Product1, Product2, Product3}",
            "5. set_dont_use: {Monday, Tuesday, Wednesday}",
            "6. set_dont_use: {John, Mary, Alex}",
            "7. set_dont_use: {London, Paris, New York}",
            "8. set_dont_use: {January, February, March}",
            "9. set_dont_use: {Red, Blue, Green}",
            "10. set_dont_use: {Apple, Orange, Banana}"
        ],
        "final_commands": [
            "set_dont_use {A1, B2, C3}",
            "set_dont_use {X4, Y5, Z6}",
            "set_dont_use {Sales, Marketing, HR}",
            "set_dont_use {Product1, Product2, Product3}",
            "set_dont_use {Monday, Tuesday, Wednesday}",
            "set_dont_use {John, Mary, Alex}",
            "set_dont_use {London, Paris, New York}",
            "set_dont_use {January, February, March}",
            "set_dont_use {Red, Blue, Green}",
            "set_dont_use {Apple, Orange, Banana}"
        ]
    },
    {
        "command": "set_driving_cell",
        "description": "Assigns a driving cell to an input port to model its drive strength.",
        "value_type": "{cell_name, port_name}",
        "constraint_type": "Standard cell",
        "syntax": "set_driving_cell -lib_cell <cell_name> -port <port_name>",
        "query": "Given the following TCL file, optimize for low power consumption by assigning the driving cell {cell_name} to the input port {port_name} to model its drive strength.",
        "ppa_constraint": "low power consumption",
        "query_examples": [
            "Here are 10 different example values for the command 'set_driving_cell' with value type '{cell_name, port_name}':",
            "",
            "1. {clk_buffer, output}",
            "2. {data_mux, sel}",
            "3. {enable_signal, input}",
            "4. {reset_gate, control}",
            "5. {output_register, data_in}",
            "6. {mux2_to_1, input_sel}",
            "7. {counter, load}",
            "8. {adder, addend_2}",
            "9. {decoder, input_3}",
            "10. {multiplexer, data_out}"
        ],
        "final_commands": [
            "set_driving_cell -lib_cell clk_buffer -port output",
            "set_driving_cell -lib_cell data_mux -port sel",
            "set_driving_cell -lib_cell enable_signal -port input",
            "set_driving_cell -lib_cell reset_gate -port control",
            "set_driving_cell -lib_cell output_register -port data_in",
            "set_driving_cell -lib_cell mux2_to_1 -port input_sel",
            "set_driving_cell -lib_cell counter -port load",
            "set_driving_cell -lib_cell adder -port addend_2",
            "set_driving_cell -lib_cell decoder -port input_3",
            "set_driving_cell -lib_cell multiplexer -port data_out"
        ]
    },
    {
        "command": "set_drive",
        "description": "Specifies the drive strength of an input port.",
        "value_type": "{float, port_name}",
        "constraint_type": "Standard cell",
        "syntax": "set_drive <drive_strength> <port_name>",
        "query": "Given the following TCL file, optimize for high performance by setting the drive strength of the input port {port_name} to {int}.",
        "ppa_constraint": "high performance",
        "query_examples": [
            "Sure! Here are 10 different example values for the `set_drive` command with the value type `{float, port_name}`:",
            "",
            "1. set_drive(5.0, \"motor_port\")",
            "2. set_drive(3.5, \"servo_port\")",
            "3. set_drive(8.2, \"motor_A\")",
            "4. set_drive(2.7, \"sensor_port1\")",
            "5. set_drive(6.4, \"motor_left\")",
            "6. set_drive(4.9, \"port2\")",
            "7. set_drive(1.1, \"motor_B\")",
            "8. set_drive(7.0, \"sensor_port2\")",
            "9. set_drive(3.3, \"servo_1\")",
            "10. set_drive(9.8, \"port3\")"
        ],
        "final_commands": [
            "Certainly! Here are the TCL commands for the 10 different example values for the `set_drive` command:",
            "",
            "1. `set_drive 5.0 motor_port`",
            "2. `set_drive 3.5 servo_port`",
            "3. `set_drive 8.2 motor_A`",
            "4. `set_drive 2.7 sensor_port1`",
            "5. `set_drive 6.4 motor_left`",
            "6. `set_drive 4.9 port2`",
            "7. `set_drive 1.1 motor_B`",
            "8. `set_drive 7.0 sensor_port2`",
            "9. `set_drive 3.3 servo_1`",
            "10. `set_drive 9.8 port3`"
        ]
    },
    {
        "command": "set_load",
        "description": "Specifies load on an output port or net.",
        "value_type": "{float, object}",
        "constraint_type": "Standard cell",
        "syntax": "set_load <load_value> <port_or_net>",
        "query": "Given the following TCL file, optimize for minimal area by specifying a load of {float} on the {port_or_net}.",
        "ppa_constraint": "minimal area",
        "query_examples": [
            "Sure! Here are 10 different example values/names/objects for the command 'set_load' with the value type '{float, object}':",
            "",
            "1. set_load(weight: 50.5, object: \"books\")",
            "2. set_load(weight: 30.8, object: \"tools\")",
            "3. set_load(weight: 75.2, object: \"electronics\")",
            "4. set_load(weight: 42.0, object: \"clothing\")",
            "5. set_load(weight: 64.7, object: \"furniture\")",
            "6. set_load(weight: 55.3, object: \"toys\")",
            "7. set_load(weight: 48.9, object: \"kitchenware\")",
            "8. set_load(weight: 38.6, object: \"sports equipment\")",
            "9. set_load(weight: 69.4, object: \"musical instruments\")",
            "10. set_load(weight: 82.1, object: \"art supplies\")"
        ],
        "final_commands": [
            "Certainly! Here are the TCL commands for each of the provided examples:",
            "",
            "1. ```set_load 50.5 books```",
            "2. ```set_load 30.8 tools```",
            "3. ```set_load 75.2 electronics```",
            "4. ```set_load 42.0 clothing```",
            "5. ```set_load 64.7 furniture```",
            "6. ```set_load 55.3 toys```",
            "7. ```set_load 48.9 kitchenware```",
            "8. ```set_load 38.6 sports equipment```",
            "9. ```set_load 69.4 musical instruments```",
            "10. ```set_load 82.1 art supplies```"
        ]
    },
    {
        "command": "set_fanout_load",
        "description": "Specifies the expected fanout load for an output pin.",
        "value_type": "{float, pin_name}",
        "constraint_type": "Standard cell",
        "syntax": "set_fanout_load <fanout_load> <pin_name>",
        "query": "Given the following TCL file, optimize for minimal area by setting the expected fanout load for the output pin {pin_name} to {float}.",
        "ppa_constraint": "minimal area",
        "query_examples": [
            "Sure! Here are 10 examples of values for the `set_fanout_load` command with the value type `{float, pin_name}`:",
            "1. (0.5, \"output_pin\")",
            "2. (0.2, \"data_out\")",
            "3. (1.0, \"clock_signal\")",
            "4. (0.8, \"address_out\")",
            "5. (0.3, \"reset_pin\")",
            "6. (0.6, \"control_signal\")",
            "7. (0.4, \"enable_pin\")",
            "8. (0.9, \"data_in\")",
            "9. (0.7, \"select_pin\")",
            "10. (0.1, \"interrupt_signal\")"
        ],
        "final_commands": [
            "Sure! Here are the TCL commands using the `set_fanout_load` syntax with the provided examples:",
            "",
            "1. set_fanout_load 0.5 \"output_pin\"",
            "2. set_fanout_load 0.2 \"data_out\"",
            "3. set_fanout_load 1.0 \"clock_signal\"",
            "4. set_fanout_load 0.8 \"address_out\"",
            "5. set_fanout_load 0.3 \"reset_pin\"",
            "6. set_fanout_load 0.6 \"control_signal\"",
            "7. set_fanout_load 0.4 \"enable_pin\"",
            "8. set_fanout_load 0.9 \"data_in\"",
            "9. set_fanout_load 0.7 \"select_pin\"",
            "10. set_fanout_load 0.1 \"interrupt_signal\""
        ]
    },
    {
        "command": "set_connection_class",
        "description": "Specifies the connection class for ports or pins to guide compilation efforts.",
        "value_type": "{class_name, port_or_pin_names}",
        "constraint_type": "Standard cell",
        "syntax": "set_connection_class <class_name> <port_or_pin_names>",
        "query": "Given the following TCL file, optimize for high performance by specifying the connection class {class_name} for the {port_or_pin_names} ports or pins.",
        "ppa_constraint": "high performance",
        "query_examples": [
            "Sure! Here are 10 example values for the command 'set_connection_class' with the value type '{class_name, port_or_pin_names}':",
            "",
            "1. {EthernetConnection, [port1, port2]}",
            "2. {USBConnection, [usb1, usb2, usb3]}",
            "3. {BluetoothConnection, [bluetooth1, bluetooth2]}",
            "4. {WirelessConnection, [wifi1, wifi2, wifi3]}",
            "5. {SerialConnection, [tx, rx]}",
            "6. {GPIOConnection, [pin1, pin2, pin3]}",
            "7. {I2CConnection, [SCL, SDA]}",
            "8. {SPIConnection, [MOSI, MISO, SCK, SS]}",
            "9. {UARTConnection, [TXD, RXD]}",
            "10. {CANConnection, [CAN_H, CAN_L]}"
        ],
        "final_commands": [
            "```tcl",
            "set_connection_class EthernetConnection {port1 port2}",
            "set_connection_class USBConnection {usb1 usb2 usb3}",
            "set_connection_class BluetoothConnection {bluetooth1 bluetooth2}",
            "set_connection_class WirelessConnection {wifi1 wifi2 wifi3}",
            "set_connection_class SerialConnection {tx rx}",
            "set_connection_class GPIOConnection {pin1 pin2 pin3}",
            "set_connection_class I2CConnection {SCL SDA}",
            "set_connection_class SPIConnection {MOSI MISO SCK SS}",
            "set_connection_class UARTConnection {TXD RXD}",
            "set_connection_class CANConnection {CAN_H CAN_L}",
            "```"
        ]
    },
    {
        "command": "set_case_analysis",
        "description": "Forces a particular logical value on specific nets or ports during timing analysis.",
        "value_type": "{bool, object}",
        "constraint_type": "Standard cell",
        "syntax": "set_case_analysis <value> <object>",
        "query": "Given the following TCL file, optimize for minimal area by setting a forced logical value of {int}/{float} on the {object} net/port during timing analysis.",
        "ppa_constraint": "minimal area",
        "query_examples": [
            "Sure! Here are 10 different example values/names/objects for the command 'set_case_analysis' with value type '{bool, object}':",
            "",
            "1. set_case_analysis: true",
            "2. set_case_analysis: false",
            "3. set_case_analysis: \"standard\"",
            "4. set_case_analysis: \"advanced\"",
            "5. set_case_analysis: {enabled: true, level: \"high\"}",
            "6. set_case_analysis: {enabled: false, level: \"low\"}",
            "7. set_case_analysis: {type: \"default\", details: {threshold: 0.5, mode: \"auto\"}}",
            "8. set_case_analysis: {type: \"custom\", details: {threshold: 0.8, mode: \"manual\"}}",
            "9. set_case_analysis: {active: true, options: [\"a\", \"b\", \"c\"]}",
            "10. set_case_analysis: {active: false, options: [\"x\", \"y\", \"z\"]}",
            "",
            "I hope you find these examples helpful! Let me know if you need more assistance."
        ],
        "final_commands": [
            "Certainly! Here are the TCL commands generated based on the examples provided:",
            "",
            "1. ```set_case_analysis true```",
            "2. ```set_case_analysis false```",
            "3. ```set_case_analysis \"standard\"```",
            "4. ```set_case_analysis \"advanced\"```",
            "5. ```set_case_analysis {enabled: true, level: \"high\"}```",
            "6. ```set_case_analysis {enabled: false, level: \"low\"}```",
            "7. ```set_case_analysis {type: \"default\", details: {threshold: 0.5, mode: \"auto\"}}```",
            "8. ```set_case_analysis {type: \"custom\", details: {threshold: 0.8, mode: \"manual\"}}```",
            "9. ```set_case_analysis {active: true, options: [\"a\", \"b\", \"c\"]}```",
            "10. ```set_case_analysis {active: false, options: [\"x\", \"y\", \"z\"]}```",
            "",
            "I hope these commands meet your requirements! Let me know if you need any more assistance."
        ]
    },
    {
        "command": "set_leakage_optimization",
        "description": "Optimizes cells for leakage power without degrading performance significantly.",
        "value_type": "{bool}",
        "constraint_type": "Standard cell",
        "syntax": "set_leakage_optimization <enable>",
        "query": "Given the following TCL file, optimize for high performance by enabling leakage power optimization.",
        "ppa_constraint": "high performance",
        "query_examples": [
            "Here are 10 different example values for the command 'set_leakage_optimization' with a value type of '{bool}':",
            "",
            "1. set_leakage_optimization: true",
            "2. set_leakage_optimization: false",
            "3. set_leakage_optimization: true",
            "4. set_leakage_optimization: false",
            "5. set_leakage_optimization: true",
            "6. set_leakage_optimization: true",
            "7. set_leakage_optimization: false",
            "8. set_leakage_optimization: true",
            "9. set_leakage_optimization: false",
            "10. set_leakage_optimization: true"
        ],
        "final_commands": [
            "```tcl",
            "set_leakage_optimization true",
            "set_leakage_optimization false",
            "set_leakage_optimization true",
            "set_leakage_optimization false",
            "set_leakage_optimization true",
            "set_leakage_optimization true",
            "set_leakage_optimization false",
            "set_leakage_optimization true",
            "set_leakage_optimization false",
            "set_leakage_optimization true",
            "```  "
        ]
    },
    {
        "command": "set_multi_vth_constraint",
        "description": "Applies threshold voltage constraints to optimize for power, speed, or area.",
        "value_type": "{voltage_thresholds}",
        "constraint_type": "Standard cell",
        "syntax": "set_multi_vth_constraint <voltage_thresholds>",
        "query": "Given the following TCL file, optimize for minimal area by setting the threshold voltage constraints to {voltage_thresholds}.",
        "ppa_constraint": "minimal area",
        "query_examples": [
            "Sure! Here are 10 examples of values/names/objects for the command 'set_multi_vth_constraint' with the value type '{voltage_thresholds}':",
            "",
            "1. High_Voltage_Thresholds",
            "2. Low_Voltage_Thresholds",
            "3. Power_Saving_Voltage_Thresholds",
            "4. Ultra_Low_Power_Voltage_Thresholds",
            "5. Customized_Voltage_Thresholds",
            "6. Redundant_Voltage_Thresholds",
            "7. Safety_Critical_Voltage_Thresholds",
            "8. Standard_Voltage_Thresholds",
            "9. Dynamic_Voltage_Thresholds",
            "10. Advanced_Voltage_Thresholds"
        ],
        "final_commands": [
            "set_multi_vth_constraint High_Voltage_Thresholds",
            "set_multi_vth_constraint Low_Voltage_Thresholds",
            "set_multi_vth_constraint Power_Saving_Voltage_Thresholds",
            "set_multi_vth_constraint Ultra_Low_Power_Voltage_Thresholds",
            "set_multi_vth_constraint Customized_Voltage_Thresholds",
            "set_multi_vth_constraint Redundant_Voltage_Thresholds",
            "set_multi_vth_constraint Safety_Critical_Voltage_Thresholds",
            "set_multi_vth_constraint Standard_Voltage_Thresholds",
            "set_multi_vth_constraint Dynamic_Voltage_Thresholds",
            "set_multi_vth_constraint Advanced_Voltage_Thresholds"
        ]
    },
    {
        "command": "create_clock",
        "description": "Defines a clock.",
        "value_type": "{name, period, wave_form, object}",
        "constraint_type": "Timing",
        "syntax": "create_clock -name <clock_name> -period <period> -waveform <wave_form> <object>",
        "query": "Given the following TCL file, optimize for high performance by defining a clock named {clock_name} with a period of {float} ns and a waveform of {list_of_floats} on {object}.",
        "ppa_constraint": "high performance",
        "query_examples": [
            "Sure, here are 10 examples of values for the command 'create_clock':",
            "",
            "1. {clk1, 10, SQUARE, clk_generator}",
            "2. {sys_clk, 5, RAMP, clockSource}",
            "3. {clk2, 15, SINE, clock_handler}",
            "4. {clk_main, 20, TRIANGLE, clk_module}",
            "5. {clk_a, 12, SQUARE, clk_manager}",
            "6. {clk_div, 8, PULSE, clk_controller}",
            "7. {clk_b, 18, SAWTOOTH, clk_service}",
            "8. {clk_sync, 25, SQUARE, clk_driver}",
            "9. {clk_x, 30, SINE, clk_interface}",
            "10. {clk_test, 3, TRIANGLE, clk_instance}"
        ],
        "final_commands": [
            "Sure! Here are the TCL commands for the 10 examples you provided:",
            "",
            "1. `create_clock -name clk1 -period 10 -waveform SQUARE clk_generator`",
            "",
            "2. `create_clock -name sys_clk -period 5 -waveform RAMP clockSource`",
            "",
            "3. `create_clock -name clk2 -period 15 -waveform SINE clock_handler`",
            "",
            "4. `create_clock -name clk_main -period 20 -waveform TRIANGLE clk_module`",
            "",
            "5. `create_clock -name clk_a -period 12 -waveform SQUARE clk_manager`",
            "",
            "6. `create_clock -name clk_div -period 8 -waveform PULSE clk_controller`",
            "",
            "7. `create_clock -name clk_b -period 18 -waveform SAWTOOTH clk_service`",
            "",
            "8. `create_clock -name clk_sync -period 25 -waveform SQUARE clk_driver`",
            "",
            "9. `create_clock -name clk_x -period 30 -waveform SINE clk_interface`",
            "",
            "10. `create_clock -name clk_test -period 3 -waveform TRIANGLE clk_instance`"
        ]
    },
    {
        "command": "create_generated_clock",
        "description": "Defines a clock that is generated by the design.",
        "value_type": "{name, source_pin, divide_factor, multiply_factor, edges, object}",
        "constraint_type": "Timing",
        "syntax": "create_generated_clock -name <clock_name> -source <source_pin> -divide_by <divide_factor> -multiply_by <multiply_factor> -edges <edges> <object>",
        "query": "Given the following TCL file, optimize for high performance by defining a generated clock named {clock_name} with a source pin {source_pin}, divide factor {int}, multiply factor {int}, and edges {edges} on {object}.",
        "ppa_constraint": "high performance",
        "query_examples": [
            "Sure! Here are 10 different example values for the `create_generated_clock` command with the given value type:",
            "",
            "1. {CLK_Gen1, in_clk, 2, 3, {posedge, negedge}, clock_gen_inst1}",
            "2. {clk_gen_2, in_clock, 4, 1, {posedge}, gen_clock2}",
            "3. {clock1, input_clk, 5, 2, {posedge, negedge}, clock_generator_1}",
            "4. {clk_out1, input_pin, 3, 2, {posedge}, clk_gen_inst_1}",
            "5. {gen_clk_a, in_clk_a, 2, 2, {posedge}, clk_gen_a}",
            "6. {gen_clock_b, in_clk_b, 1, 3, {negedge}, clk_gen_b}",
            "7. {clk_1, input_pin_1, 1, 1, {posedge, negedge}, clock_gen_inst_2}",
            "8. {generated_clk_2, in_clk_2, 4, 2, {negedge}, gen_clock_inst_2}",
            "9. {clk_gen_out_3, in_clk_3, 3, 1, {posedge}, generator_clk_3}",
            "10. {clock_out_3, input_clock_3, 2, 4, {negedge}, clock_gen_instance_3}"
        ],
        "final_commands": [
            "Certainly! Here are the TCL commands for the 10 different example values of the `create_generated_clock` command:",
            "",
            "1. ```tcl",
            "create_generated_clock -name CLK_Gen1 -source in_clk -divide_by 2 -multiply_by 3 -edges {posedge negedge} clock_gen_inst1",
            "```",
            "",
            "2. ```tcl",
            "create_generated_clock -name clk_gen_2 -source in_clock -divide_by 4 -multiply_by 1 -edges {posedge} gen_clock2",
            "```",
            "",
            "3. ```tcl",
            "create_generated_clock -name clock1 -source input_clk -divide_by 5 -multiply_by 2 -edges {posedge negedge} clock_generator_1",
            "```",
            "",
            "4. ```tcl",
            "create_generated_clock -name clk_out1 -source input_pin -divide_by 3 -multiply_by 2 -edges {posedge} clk_gen_inst_1",
            "```",
            "",
            "5. ```tcl",
            "create_generated_clock -name gen_clk_a -source in_clk_a -divide_by 2 -multiply_by 2 -edges {posedge} clk_gen_a",
            "```",
            "",
            "6. ```tcl",
            "create_generated_clock -name gen_clock_b -source in_clk_b -divide_by 1 -multiply_by 3 -edges {negedge} clk_gen_b",
            "```",
            "",
            "7. ```tcl",
            "create_generated_clock -name clk_1 -source input_pin_1 -divide_by 1 -multiply_by 1 -edges {posedge negedge} clock_gen_inst_2",
            "```",
            "",
            "8. ```tcl",
            "create_generated_clock -name generated_clk_2 -source in_clk_2 -divide_by 4 -multiply_by 2 -edges {negedge} gen_clock_inst_2",
            "```",
            "",
            "9. ```tcl",
            "create_generated_clock -name clk_gen_out_3 -source in_clk_3 -divide_by 3 -multiply_by 1 -edges {posedge} generator_clk_3",
            "```",
            "",
            "10. ```tcl",
            "create_generated_clock -name clock_out_3 -source input_clock_3 -divide_by 2 -multiply_by 4 -edges {negedge} clock_gen_instance_3",
            "```"
        ]
    },
    {
        "command": "set_clock_uncertainty",
        "description": "Specifies uncertainty for clock timing.",
        "value_type": "{float, clock_name}",
        "constraint_type": "Timing",
        "syntax": "set_clock_uncertainty <uncertainty_value> -clock <clock_name>",
        "query": "Given the following TCL file, optimize for high performance by setting the clock uncertainty for the {clock_name} clock to {float} ns.",
        "ppa_constraint": "high performance",
        "query_examples": [
            "Sure! Here are 10 example values for the command 'set_clock_uncertainty':",
            "",
            "1. 0.1, clk1",
            "2. 0.05, clk2",
            "3. 0.2, clk3",
            "4. 0.15, clk4",
            "5. 0.08, clk5",
            "6. 0.12, clk6",
            "7. 0.18, clk7",
            "8. 0.03, clk8",
            "9. 0.25, clk9",
            "10. 0.09, clk10"
        ],
        "final_commands": [
            "set_clock_uncertainty 0.1 -clock clk1  ",
            "set_clock_uncertainty 0.05 -clock clk2  ",
            "set_clock_uncertainty 0.2 -clock clk3  ",
            "set_clock_uncertainty 0.15 -clock clk4  ",
            "set_clock_uncertainty 0.08 -clock clk5  ",
            "set_clock_uncertainty 0.12 -clock clk6  ",
            "set_clock_uncertainty 0.18 -clock clk7  ",
            "set_clock_uncertainty 0.03 -clock clk8  ",
            "set_clock_uncertainty 0.25 -clock clk9  ",
            "set_clock_uncertainty 0.09 -clock clk10  "
        ]
    },
    {
        "command": "set_clock_latency",
        "description": "Defines clock latency.",
        "value_type": "{float, clock_name}",
        "constraint_type": "Timing",
        "syntax": "set_clock_latency <latency_value> -clock <clock_name>",
        "query": "Given the following TCL file, optimize for high performance by setting the clock latency for the {clock_name} clock to {float} ns.",
        "ppa_constraint": "high performance",
        "query_examples": [
            "Sure! Here are 10 example values for the command 'set_clock_latency' with a value type of '{float, clock_name}':",
            "",
            "1. set_clock_latency 0.5 clk1",
            "2. set_clock_latency 1.2 clk2",
            "3. set_clock_latency 0.8 clk3",
            "4. set_clock_latency 0.3 clk4",
            "5. set_clock_latency 1.5 clk5",
            "6. set_clock_latency 0.7 clk6",
            "7. set_clock_latency 1.0 clk7",
            "8. set_clock_latency 0.6 clk8",
            "9. set_clock_latency 1.4 clk9",
            "10. set_clock_latency 1.1 clk10"
        ],
        "final_commands": [
            "```tcl",
            "set_clock_latency 0.5 -clock clk1",
            "set_clock_latency 1.2 -clock clk2",
            "set_clock_latency 0.8 -clock clk3",
            "set_clock_latency 0.3 -clock clk4",
            "set_clock_latency 1.5 -clock clk5",
            "set_clock_latency 0.7 -clock clk6",
            "set_clock_latency 1.0 -clock clk7",
            "set_clock_latency 0.6 -clock clk8",
            "set_clock_latency 1.4 -clock clk9",
            "set_clock_latency 1.1 -clock clk10",
            "```"
        ]
    },
    {
        "command": "set_clock_transition",
        "description": "Sets clock transition times.",
        "value_type": "{float,clock_name}",
        "constraint_type": "Timing",
        "syntax": "set_clock_transition <transition_time> -clock <clock_name>",
        "query": "Given the following TCL file, optimize for minimal area by setting the clock transition time for the {clock_name} clock to {float} ns.",
        "ppa_constraint": "minimal area",
        "query_examples": [
            "Sure! Here are 10 example values/names/objects for the command 'set_clock_transition':",
            "",
            "1. set_clock_transition 0.5",
            "2. set_clock_transition 1.0",
            "3. set_clock_transition 1.5",
            "4. set_clock_transition 2.0",
            "5. set_clock_transition 2.5",
            "6. set_clock_transition 3.0",
            "7. set_clock_transition 3.5",
            "8. set_clock_transition 4.0",
            "9. set_clock_transition 4.5",
            "10. set_clock_transition clock_A"
        ],
        "final_commands": [
            "Sure! Here are commands using the syntax 'set_clock_transition <transition_time> -clock <clock_name>':",
            "",
            "1. set_clock_transition 0.5 -clock <clock_name>",
            "2. set_clock_transition 1.0 -clock <clock_name>",
            "3. set_clock_transition 1.5 -clock <clock_name>",
            "4. set_clock_transition 2.0 -clock <clock_name>",
            "5. set_clock_transition 2.5 -clock <clock_name>",
            "6. set_clock_transition 3.0 -clock <clock_name>",
            "7. set_clock_transition 3.5 -clock <clock_name>",
            "8. set_clock_transition 4.0 -clock <clock_name>",
            "9. set_clock_transition 4.5 -clock <clock_name>",
            "10. set_clock_transition clock_A -clock <clock_name>"
        ]
    },
    {
        "command": "set_input_delay",
        "description": "Specifies input delay with respect to a clock.",
        "value_type": "{float, clock_name, port_name}",
        "constraint_type": "Timing",
        "syntax": "set_input_delay <delay_value> -clock <clock_name> <port_name>",
        "query": "Given the following TCL file, optimize for low power consumption by setting the input delay with respect to the {clock_name} clock for the {port_name} port to {float} ns.",
        "ppa_constraint": "low power consumption",
        "query_examples": [
            "Here are 10 different example values for the command 'set_input_delay' with value type {float, clock_name, port_name}:",
            "1. set_input_delay 1.5 -clock CLK -from INPUT_A",
            "2. set_input_delay 0.8 -clock SYS_CLK -from DATA_IN",
            "3. set_input_delay 2.0 -clock CLOCK_A -from SIGNAL_X",
            "4. set_input_delay 1.2 -clock CLK1 -from PORT_A",
            "5. set_input_delay 0.6 -clock CLK2 -from PORT_B",
            "6. set_input_delay 1.0 -clock CLOCK_1 -from INPUT_1",
            "7. set_input_delay 0.9 -clock CLK_A -from DATA_1",
            "8. set_input_delay 1.7 -clock CLK_B -from PORT_IN",
            "9. set_input_delay 1.3 -clock MAIN_CLK -from INPUT_DATA",
            "10. set_input_delay 0.5 -clock CLK_A -from PORT_X"
        ],
        "final_commands": [
            "1. set_input_delay 1.5 -clock CLK -from INPUT_A",
            "2. set_input_delay 0.8 -clock SYS_CLK -from DATA_IN",
            "3. set_input_delay 2.0 -clock CLOCK_A -from SIGNAL_X",
            "4. set_input_delay 1.2 -clock CLK1 -from PORT_A",
            "5. set_input_delay 0.6 -clock CLK2 -from PORT_B",
            "6. set_input_delay 1.0 -clock CLOCK_1 -from INPUT_1",
            "7. set_input_delay 0.9 -clock CLK_A -from DATA_1",
            "8. set_input_delay 1.7 -clock CLK_B -from PORT_IN",
            "9. set_input_delay 1.3 -clock MAIN_CLK -from INPUT_DATA",
            "10. set_input_delay 0.5 -clock CLK_A -from PORT_X"
        ]
    },
    {
        "command": "set_output_delay",
        "description": "Specifies output delay with respect to a clock.",
        "value_type": "{float, clock_name, port_name}",
        "constraint_type": "Timing",
        "syntax": "set_output_delay <delay_value> -clock <clock_name> <port_name>",
        "query": "Given the following TCL file, optimize for high performance by specifying an output delay of {float} ns with respect to the {clock_name} clock for the {port_name} port.",
        "ppa_constraint": "high performance",
        "query_examples": [
            "1. set_output_delay 0.5 ns -clock clk -to out_data",
            "2. set_output_delay 1.0 ns -clock sys_clk -to output_port",
            "3. set_output_delay 0.7 ns -clock wr_clk -to output_signal",
            "4. set_output_delay 0.3 ns -clock clk_gen -to out_clk",
            "5. set_output_delay 0.8 ns -clock tb_clk -to out_data",
            "6. set_output_delay 0.6 ns -clock clk_out -to output_port",
            "7. set_output_delay 0.4 ns -clock clk_delay -to out_signal",
            "8. set_output_delay 1.2 ns -clock sys_clk -to output_port",
            "9. set_output_delay 0.9 ns -clock wr_clk -to out_data",
            "10. set_output_delay 0.2 ns -clock clk_gen -to out_signal"
        ],
        "final_commands": [
            "1. set_output_delay 0.5 ns -clock clk -to out_data",
            "2. set_output_delay 1.0 ns -clock sys_clk -to output_port",
            "3. set_output_delay 0.7 ns -clock wr_clk -to output_signal",
            "4. set_output_delay 0.3 ns -clock clk_gen -to out_clk",
            "5. set_output_delay 0.8 ns -clock tb_clk -to out_data",
            "6. set_output_delay 0.6 ns -clock clk_out -to output_port",
            "7. set_output_delay 0.4 ns -clock clk_delay -to out_signal",
            "8. set_output_delay 1.2 ns -clock sys_clk -to output_port",
            "9. set_output_delay 0.9 ns -clock wr_clk -to out_data",
            "10. set_output_delay 0.2 ns -clock clk_gen -to out_signal"
        ]
    },
    {
        "command": "set_max_delay",
        "description": "Sets the maximum delay for a path.",
        "value_type": "{float, from_object, to_object}",
        "constraint_type": "Timing",
        "syntax": "set_max_delay <delay_value> -from <from_object> -to <to_object>",
        "query": "Given the following TCL file, optimize for high performance by setting the maximum delay for the path from {from_object} to {to_object} to {float} ns.",
        "ppa_constraint": "high performance",
        "query_examples": [
            "1. set_max_delay 1.3 from_object1 to_object1",
            "2. set_max_delay 0.5 from_object2 to_object2",
            "3. set_max_delay 2.0 from_object3 to_object3",
            "4. set_max_delay 1.8 from_object4 to_object4",
            "5. set_max_delay 0.7 from_object5 to_object5",
            "6. set_max_delay 3.2 from_object6 to_object6",
            "7. set_max_delay 1.1 from_object7 to_object7",
            "8. set_max_delay 0.9 from_object8 to_object8",
            "9. set_max_delay 2.5 from_object9 to_object9",
            "10. set_max_delay 1.6 from_object10 to_object10"
        ],
        "final_commands": [
            "Here are the TCL commands for the given examples:",
            "",
            "1. set_max_delay 1.3 -from from_object1 -to to_object1",
            "2. set_max_delay 0.5 -from from_object2 -to to_object2",
            "3. set_max_delay 2.0 -from from_object3 -to to_object3",
            "4. set_max_delay 1.8 -from from_object4 -to to_object4",
            "5. set_max_delay 0.7 -from from_object5 -to to_object5",
            "6. set_max_delay 3.2 -from from_object6 -to to_object6",
            "7. set_max_delay 1.1 -from from_object7 -to to_object7",
            "8. set_max_delay 0.9 -from from_object8 -to to_object8",
            "9. set_max_delay 2.5 -from from_object9 -to to_object9",
            "10. set_max_delay 1.6 -from from_object10 -to to_object10"
        ]
    },
    {
        "command": "set_min_delay",
        "description": "Sets the minimum delay for a path.",
        "value_type": "{float, from_object, to_object}",
        "constraint_type": "Timing",
        "syntax": "set_min_delay <delay_value> -from <from_object> -to <to_object>",
        "query": "Given the following TCL file, optimize for high performance by setting the minimum delay for the path from {from_object} to {to_object} to {float} ns.",
        "ppa_constraint": "high performance",
        "query_examples": [
            "1. set_min_delay 0.5 from_objectA to_objectB",
            "2. set_min_delay 1.2 from_objectX to_objectY",
            "3. set_min_delay 0.8 from_objectM to_objectN",
            "4. set_min_delay 0.3 from_objectP to_objectQ",
            "5. set_min_delay 0.7 from_objectZ to_objectW",
            "6. set_min_delay 1.5 from_objectK to_objectL",
            "7. set_min_delay 2.0 from_objectG to_objectH",
            "8. set_min_delay 0.1 from_objectR to_objectS",
            "9. set_min_delay 0.6 from_objectD to_objectE",
            "10. set_min_delay 1.0 from_objectU to_objectV"
        ],
        "final_commands": [
            "1. set_min_delay 0.5 -from from_objectA -to to_objectB",
            "2. set_min_delay 1.2 -from from_objectX -to to_objectY",
            "3. set_min_delay 0.8 -from from_objectM -to to_objectN",
            "4. set_min_delay 0.3 -from from_objectP -to to_objectQ",
            "5. set_min_delay 0.7 -from from_objectZ -to to_objectW",
            "6. set_min_delay 1.5 -from from_objectK -to to_objectL",
            "7. set_min_delay 2.0 -from from_objectG -to to_objectH",
            "8. set_min_delay 0.1 -from from_objectR -to to_objectS",
            "9. set_min_delay 0.6 -from from_objectD -to to_objectE",
            "10. set_min_delay 1.0 -from from_objectU -to to_objectV"
        ]
    },
    {
        "command": "set_false_path",
        "description": "Specifies a false timing path.",
        "value_type": "{object, object}",
        "constraint_type": "Timing",
        "syntax": "set_false_path -from <source_objects> -to <destination_objects>",
        "query": "Given the following TCL file, optimize for low power consumption by specifying a false timing path from {source_objects} to {destination_objects}.",
        "ppa_constraint": "low power consumption",
        "query_examples": [
            "Sure! Here are 10 different example values for the `set_false_path` command with the value type `{object, object}`:",
            "",
            "1. set_false_path (clock_A, data_in)",
            "2. set_false_path (reset_signal, address_bus)",
            "3. set_false_path (control_signal, status_signal)",
            "4. set_false_path (data_out, enable_signal)",
            "5. set_false_path (data_bus, control_bus)",
            "6. set_false_path (clock_signal, interrupt_signal)",
            "7. set_false_path (input_1, output_1)",
            "8. set_false_path (input_2, output_2)",
            "9. set_false_path (source_signal, destination_signal)",
            "10. set_false_path (bus_A, bus_B)"
        ],
        "final_commands": [
            "Certainly! Here are the TCL commands for each of the 10 different example values for the `set_false_path` command:",
            "",
            "1. ```tcl",
            "set_false_path -from clock_A -to data_in",
            "```",
            "",
            "2. ```tcl",
            "set_false_path -from reset_signal -to address_bus",
            "```",
            "",
            "3. ```tcl",
            "set_false_path -from control_signal -to status_signal",
            "```",
            "",
            "4. ```tcl",
            "set_false_path -from data_out -to enable_signal",
            "```",
            "",
            "5. ```tcl",
            "set_false_path -from data_bus -to control_bus",
            "```",
            "",
            "6. ```tcl",
            "set_false_path -from clock_signal -to interrupt_signal",
            "```",
            "",
            "7. ```tcl",
            "set_false_path -from input_1 -to output_1",
            "```",
            "",
            "8. ```tcl",
            "set_false_path -from input_2 -to output_2",
            "```",
            "",
            "9. ```tcl",
            "set_false_path -from source_signal -to destination_signal",
            "```",
            "",
            "10. ```tcl",
            "set_false_path -from bus_A -to bus_B",
            "```"
        ]
    },
    {
        "command": "set_multicycle_path",
        "description": "Sets up a multi-cycle path.",
        "value_type": "{int, from_object, to_object}",
        "constraint_type": "Timing",
        "syntax": "set_multicycle_path <cycle_count> -from <from_object> -to <to_object>",
        "query": "Given the following TCL file, optimize for low power consumption by setting a multi-cycle path from {from_object} to {to_object} with a cycle count of {int}.",
        "ppa_constraint": "low power consumption",
        "query_examples": [
            "1. set_multicycle_path 1, from_object_1, to_object_1",
            "2. set_multicycle_path 2, from_object_2, to_object_2",
            "3. set_multicycle_path 3, from_object_3, to_object_3",
            "4. set_multicycle_path 4, from_object_4, to_object_4",
            "5. set_multicycle_path 5, from_object_5, to_object_5",
            "6. set_multicycle_path 6, from_object_6, to_object_6",
            "7. set_multicycle_path 7, from_object_7, to_object_7",
            "8. set_multicycle_path 8, from_object_8, to_object_8",
            "9. set_multicycle_path 9, from_object_9, to_object_9",
            "10. set_multicycle_path 10, from_object_10, to_object_10"
        ],
        "final_commands": [
            "1. set_multicycle_path 1 -from from_object_1 -to to_object_1",
            "2. set_multicycle_path 2 -from from_object_2 -to to_object_2",
            "3. set_multicycle_path 3 -from from_object_3 -to to_object_3",
            "4. set_multicycle_path 4 -from from_object_4 -to to_object_4",
            "5. set_multicycle_path 5 -from from_object_5 -to to_object_5",
            "6. set_multicycle_path 6 -from from_object_6 -to to_object_6",
            "7. set_multicycle_path 7 -from from_object_7 -to to_object_7",
            "8. set_multicycle_path 8 -from from_object_8 -to to_object_8",
            "9. set_multicycle_path 9 -from from_object_9 -to to_object_9",
            "10. set_multicycle_path 10 -from from_object_10 -to to_object_10"
        ]
    },
    {
        "command": "set_clock_groups",
        "description": "Groups clocks together to define timing relationships.",
        "value_type": "{clock_groups}",
        "constraint_type": "Timing",
        "syntax": "set_clock_groups -group <clock_name> -group <clock_name> -asynchronous",
        "query": "Given the following TCL file, optimize for low power consumption by grouping the clocks {clock_name1} and {clock_name2} together as asynchronous clocks to define their timing relationship.",
        "ppa_constraint": "low power consumption",
        "query_examples": [
            "Sure! Here are 10 different example values/names/objects for the command 'set_clock_groups' with the value type '{clock_groups}':",
            "",
            "1. {source_clk_group}",
            "2. {dest_clk_group}",
            "3. {clock_group_A}",
            "4. {clock_group_B}",
            "5. {primary_clk_group}",
            "6. {secondary_clk_group}",
            "7. {master_clk_group}",
            "8. {slave_clk_group}",
            "9. {top_clk_group}",
            "10. {bottom_clk_group}"
        ],
        "final_commands": [
            "set_clock_groups -group {source_clk_group} -group {dest_clk_group} -asynchronous",
            "",
            "set_clock_groups -group {clock_group_A} -group {clock_group_B} -asynchronous",
            "",
            "set_clock_groups -group {primary_clk_group} -group {secondary_clk_group} -asynchronous",
            "",
            "set_clock_groups -group {master_clk_group} -group {slave_clk_group} -asynchronous",
            "",
            "set_clock_groups -group {top_clk_group} -group {bottom_clk_group} -asynchronous"
        ]
    },
    {
        "command": "set_propagated_clock",
        "description": "Defines clocks to be propagated during synthesis.",
        "value_type": "{clock_name}",
        "constraint_type": "Timing",
        "syntax": "set_propagated_clock <clock_name>",
        "query": "Given the following TCL file, optimize for low power consumption by defining the clock {clock_name} to be propagated during synthesis.",
        "ppa_constraint": "low power consumption",
        "query_examples": [
            "Certainly! Here are 10 different example values for the command 'set_propagated_clock' with the value type '{clock_name}':",
            "",
            "1. set_propagated_clock clk1",
            "2. set_propagated_clock clk2",
            "3. set_propagated_clock clk3",
            "4. set_propagated_clock clk4",
            "5. set_propagated_clock clk5",
            "6. set_propagated_clock clk6",
            "7. set_propagated_clock clk7",
            "8. set_propagated_clock clk8",
            "9. set_propagated_clock clk9",
            "10. set_propagated_clock clk10",
            "",
            "These examples demonstrate setting the propagated clock for different clock names, indicated as clk1 to clk10."
        ],
        "final_commands": [
            "set_propagated_clock clk1",
            "set_propagated_clock clk2",
            "set_propagated_clock clk3",
            "set_propagated_clock clk4",
            "set_propagated_clock clk5",
            "set_propagated_clock clk6",
            "set_propagated_clock clk7",
            "set_propagated_clock clk8",
            "set_propagated_clock clk9",
            "set_propagated_clock clk10"
        ]
    },
    {
        "command": "set_max_time_borrow",
        "description": "Defines the maximum time borrowing for a sequential path.",
        "value_type": "{float}",
        "constraint_type": "Timing",
        "syntax": "set_max_time_borrow <time>",
        "query": "Given the following TCL file, optimize for low power consumption by setting the maximum time borrowing for a sequential path to {float} ns.",
        "ppa_constraint": "low power consumption",
        "query_examples": [
            "1. set_max_time_borrow: 7.5",
            "2. set_max_time_borrow: 10.25",
            "3. set_max_time_borrow: 6.75",
            "4. set_max_time_borrow: 8.0",
            "5. set_max_time_borrow: 9.5",
            "6. set_max_time_borrow: 11.0",
            "7. set_max_time_borrow: 5.5",
            "8. set_max_time_borrow: 12.75",
            "9. set_max_time_borrow: 7.0",
            "10. set_max_time_borrow: 6.25"
        ],
        "final_commands": [
            "1. set_max_time_borrow 7.5",
            "2. set_max_time_borrow 10.25",
            "3. set_max_time_borrow 6.75",
            "4. set_max_time_borrow 8.0",
            "5. set_max_time_borrow 9.5",
            "6. set_max_time_borrow 11.0",
            "7. set_max_time_borrow 5.5",
            "8. set_max_time_borrow 12.75",
            "9. set_max_time_borrow 7.0",
            "10. set_max_time_borrow 6.25"
        ]
    },
    {
        "command": "set_max_transition",
        "description": "Specifies the maximum transition time on a net.",
        "value_type": "{float}",
        "constraint_type": "Timing",
        "syntax": "set_max_transition <transition_time>",
        "query": "Given the following TCL file, optimize for minimal area by specifying the maximum transition time on a net to {float} ns.",
        "ppa_constraint": "minimal area",
        "query_examples": [
            "Sure! Here are 10 different example values for the command 'set_max_transition' with value type '{float}':",
            "",
            "1. set_max_transition: 0.5",
            "2. set_max_transition: 1.0",
            "3. set_max_transition: 2.3",
            "4. set_max_transition: 0.75",
            "5. set_max_transition: 3.14",
            "6. set_max_transition: 0.8",
            "7. set_max_transition: 1.5",
            "8. set_max_transition: 3.0",
            "9. set_max_transition: 0.6",
            "10. set_max_transition: 2.0"
        ],
        "final_commands": [
            "```tcl",
            "set_max_transition 0.5",
            "set_max_transition 1.0",
            "set_max_transition 2.3",
            "set_max_transition 0.75",
            "set_max_transition 3.14",
            "set_max_transition 0.8",
            "set_max_transition 1.5",
            "set_max_transition 3.0",
            "set_max_transition 0.6",
            "set_max_transition 2.0",
            "```"
        ]
    },
    {
        "command": "set_max_skew",
        "description": "Sets the maximum skew allowed between clock signals.",
        "value_type": "{float}",
        "constraint_type": "Timing",
        "syntax": "set_max_skew <skew_value>",
        "query": "Given the following TCL file, optimize for low power consumption by setting the maximum skew allowed between clock signals to {float} ns.",
        "ppa_constraint": "low power consumption",
        "query_examples": [
            "1. set_max_skew: 3.5",
            "2. set_max_skew: 2.8",
            "3. set_max_skew: 4.2",
            "4. set_max_skew: 5.1",
            "5. set_max_skew: 1.9",
            "6. set_max_skew: 4.8",
            "7. set_max_skew: 3.0",
            "8. set_max_skew: 2.3",
            "9. set_max_skew: 6.2",
            "10. set_max_skew: 2.5"
        ],
        "final_commands": [
            "1. set_max_skew 3.5",
            "2. set_max_skew 2.8",
            "3. set_max_skew 4.2",
            "4. set_max_skew 5.1",
            "5. set_max_skew 1.9",
            "6. set_max_skew 4.8",
            "7. set_max_skew 3.0",
            "8. set_max_skew 2.3",
            "9. set_max_skew 6.2",
            "10. set_max_skew 2.5"
        ]
    },
    {
        "command": "set_bus_skew",
        "description": "Manages skew within buses to meet setup and hold times.",
        "value_type": "{skew_values, bus_name}",
        "constraint_type": "Timing",
        "syntax": "set_bus_skew <skew_values> <bus_name>",
        "query": "Given the following TCL file, optimize for low power consumption by setting the skew for the {bus_name} bus to {skew_values}.",
        "ppa_constraint": "low power consumption",
        "query_examples": [
            "Sure! Here are 10 example values for the command `set_bus_skew` with the value type `{skew_value, bus_name}`:",
            "",
            "1. {10, \"Bus_A\"}",
            "2. {5, \"Bus_B\"}",
            "3. {15, \"Bus_C\"}",
            "4. {7, \"Bus_D\"}",
            "5. {20, \"Bus_E\"}",
            "6. {3, \"Bus_F\"}",
            "7. {12, \"Bus_G\"}",
            "8. {8, \"Bus_H\"}",
            "9. {18, \"Bus_I\"}",
            "10. {6, \"Bus_J\"}",
            "",
            "These examples represent different skew values assigned to different bus names in the context of using the `set_bus_skew` command."
        ],
        "final_commands": [
            "Sure! Here are the TCL commands for each example:",
            "",
            "1. `set_bus_skew 10 \"Bus_A\"`",
            "2. `set_bus_skew 5 \"Bus_B\"`",
            "3. `set_bus_skew 15 \"Bus_C\"`",
            "4. `set_bus_skew 7 \"Bus_D\"`",
            "5. `set_bus_skew 20 \"Bus_E\"`",
            "6. `set_bus_skew 3 \"Bus_F\"`",
            "7. `set_bus_skew 12 \"Bus_G\"`",
            "8. `set_bus_skew 8 \"Bus_H\"`",
            "9. `set_bus_skew 18 \"Bus_I\"`",
            "10. `set_bus_skew 6 \"Bus_J\"`"
        ]
    },
    {
        "command": "set_hold_fixing",
        "description": "Adjusts the design to fix hold timing violations.",
        "value_type": "{bool}",
        "constraint_type": "Timing",
        "syntax": "set_hold_fixing <enable>",
        "query": "Given the following TCL file, optimize for minimal area by adjusting the design to fix hold timing violations. Enable hold fixing by using the set_hold_fixing command.",
        "ppa_constraint": "minimal area",
        "query_examples": [
            "Sure! Here are 10 example values for the command 'set_hold_fixing' with value type '{bool}':",
            "",
            "1. set_hold_fixing: true",
            "2. set_hold_fixing: false",
            "3. set_hold_fixing: false",
            "4. set_hold_fixing: true",
            "5. set_hold_fixing: true",
            "6. set_hold_fixing: false",
            "7. set_hold_fixing: true",
            "8. set_hold_fixing: false",
            "9. set_hold_fixing: false",
            "10. set_hold_fixing: true"
        ],
        "final_commands": [
            "Here are the TCL commands for the given examples:",
            "",
            "1. set_hold_fixing true",
            "2. set_hold_fixing false",
            "3. set_hold_fixing false",
            "4. set_hold_fixing true",
            "5. set_hold_fixing true",
            "6. set_hold_fixing false",
            "7. set_hold_fixing true",
            "8. set_hold_fixing false",
            "9. set_hold_fixing false",
            "10. set_hold_fixing true"
        ]
    },
    {
        "command": "set_fix_hold",
        "description": "Synonym for hold time adjustments in certain tool versions.",
        "value_type": "{None}",
        "constraint_type": "Timing",
        "syntax": "set_fix_hold",
        "query": "Given the following TCL file, optimize for low power consumption by setting the hold time adjustments using the `set_fix_hold` command.",
        "ppa_constraint": "low power consumption",
        "query_examples": [
            "1. set_fix_hold: None",
            "2. set_fix_hold: None",
            "3. set_fix_hold: None",
            "4. set_fix_hold: None",
            "5. set_fix_hold: None",
            "6. set_fix_hold: None",
            "7. set_fix_hold: None",
            "8. set_fix_hold: None",
            "9. set_fix_hold: None",
            "10. set_fix_hold: None"
        ],
        "final_commands": [
            "1. set_fix_hold: None  ",
            "```tcl",
            "set_fix_hold 1 None",
            "```  ",
            "",
            "2. set_fix_hold: None  ",
            "```tcl",
            "set_fix_hold 2 None",
            "```  ",
            "",
            "3. set_fix_hold: None  ",
            "```tcl",
            "set_fix_hold 3 None",
            "```  ",
            "",
            "4. set_fix_hold: None  ",
            "```tcl",
            "set_fix_hold 4 None",
            "```  ",
            "",
            "5. set_fix_hold: None  ",
            "```tcl",
            "set_fix_hold 5 None",
            "```  ",
            "",
            "6. set_fix_hold: None  ",
            "```tcl",
            "set_fix_hold 6 None",
            "```  ",
            "",
            "7. set_fix_hold: None  ",
            "```tcl",
            "set_fix_hold 7 None",
            "```  ",
            "",
            "8. set_fix_hold: None  ",
            "```tcl",
            "set_fix_hold 8 None",
            "```  ",
            "",
            "9. set_fix_hold: None  ",
            "```tcl",
            "set_fix_hold 9 None",
            "```  ",
            "",
            "10. set_fix_hold: None  ",
            "```tcl",
            "set_fix_hold 10 None",
            "```  ",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
        ]
    },
    {
        "command": "set_min_pulse_width",
        "description": "Ensures signals meet the minimum pulse width requirements.",
        "value_type": "{float, signal_name}",
        "constraint_type": "Timing",
        "syntax": "set_min_pulse_width <pulse_width> <signal_name>",
        "query": "Given the following TCL file, optimize for low power consumption by ensuring that the signal {signal_name} meets the minimum pulse width requirement of {pulse_width}.",
        "ppa_constraint": "low power consumption",
        "query_examples": [
            "Sure! Here are 10 different example values for the `set_min_pulse_width` command with the value type `{float, signal_name}`:",
            "",
            "1. set_min_pulse_width(0.5, signal_A)",
            "2. set_min_pulse_width(0.2, signal_B)",
            "3. set_min_pulse_width(1.0, signal_C)",
            "4. set_min_pulse_width(0.8, signal_D)",
            "5. set_min_pulse_width(0.6, signal_E)",
            "6. set_min_pulse_width(0.3, signal_F)",
            "7. set_min_pulse_width(0.7, signal_G)",
            "8. set_min_pulse_width(0.4, signal_H)",
            "9. set_min_pulse_width(0.9, signal_I)",
            "10. set_min_pulse_width(0.1, signal_J)"
        ],
        "final_commands": [
            "```tcl",
            "set_min_pulse_width 0.5 signal_A",
            "set_min_pulse_width 0.2 signal_B",
            "set_min_pulse_width 1.0 signal_C",
            "set_min_pulse_width 0.8 signal_D",
            "set_min_pulse_width 0.6 signal_E",
            "set_min_pulse_width 0.3 signal_F",
            "set_min_pulse_width 0.7 signal_G",
            "set_min_pulse_width 0.4 signal_H",
            "set_min_pulse_width 0.9 signal_I",
            "set_min_pulse_width 0.1 signal_J",
            "```"
        ]
    },
    {
        "command": "set_signal_integrity_effort",
        "description": "Specifies the level of effort the tool should use to analyze and correct signal integrity issues.",
        "value_type": "{level}",
        "constraint_type": "Timing",
        "syntax": "set_signal_integrity_effort <level>",
        "query": "Given the following TCL file, optimize for high performance by setting the signal integrity effort level to {level}.",
        "ppa_constraint": "high performance",
        "query_examples": [
            "Sure! Here are 10 example values/names/objects for the command 'set_signal_integrity_effort' with value type '{level}':",
            "",
            "1. set_signal_integrity_effort(low)",
            "2. set_signal_integrity_effort(medium)",
            "3. set_signal_integrity_effort(high)",
            "4. set_signal_integrity_effort(minimal)",
            "5. set_signal_integrity_effort(maximum)",
            "6. set_signal_integrity_effort(normal)",
            "7. set_signal_integrity_effort(advanced)",
            "8. set_signal_integrity_effort(standard)",
            "9. set_signal_integrity_effort(intensive)",
            "10. set_signal_integrity_effort(strong)"
        ],
        "final_commands": [
            "Certainly! Here are the TCL commands based on the examples you provided:",
            "",
            "1. set_signal_integrity_effort low",
            "",
            "2. set_signal_integrity_effort medium",
            "",
            "3. set_signal_integrity_effort high",
            "",
            "4. set_signal_integrity_effort minimal",
            "",
            "5. set_signal_integrity_effort maximum",
            "",
            "6. set_signal_integrity_effort normal",
            "",
            "7. set_signal_integrity_effort advanced",
            "",
            "8. set_signal_integrity_effort standard",
            "",
            "9. set_signal_integrity_effort intensive",
            "",
            "10. set_signal_integrity_effort strong"
        ]
    },
    {
        "command": "set_power_optimization",
        "description": "Enables or configures various power optimization techniques such as gate resizing, Vt swapping, or power gating.",
        "value_type": "{bool}",
        "constraint_type": "Timing",
        "syntax": "set_power_optimization <enable>",
        "query": "Given the following TCL file, optimize for high performance by enabling power optimization techniques.",
        "ppa_constraint": "high performance",
        "query_examples": [
            "1. set_power_optimization: true",
            "2. set_power_optimization: false",
            "3. set_power_optimization: true",
            "4. set_power_optimization: false",
            "5. set_power_optimization: true",
            "6. set_power_optimization: false",
            "7. set_power_optimization: true",
            "8. set_power_optimization: false",
            "9. set_power_optimization: true",
            "10. set_power_optimization: false"
        ],
        "final_commands": [
            "1. set_power_optimization true",
            "2. set_power_optimization false",
            "3. set_power_optimization true",
            "4. set_power_optimization false",
            "5. set_power_optimization true",
            "6. set_power_optimization false",
            "7. set_power_optimization true",
            "8. set_power_optimization false",
            "9. set_power_optimization true",
            "10. set_power_optimization false"
        ]
    },
    {
        "command": "set_area_group",
        "description": "Defines area constraints for specific groups of cells to control placement density or meet floorplanning requirements.",
        "value_type": "{group_name, cell_names}",
        "constraint_type": "Timing",
        "syntax": "set_area_group <group_name> <cell_names>",
        "query": "Given the following TCL file, optimize for high performance by defining an area group named {group_name} for the {cell_name} cells to control placement density.",
        "ppa_constraint": "high performance",
        "query_examples": [
            "Sure! Here are 10 different example values for the command 'set_area_group' with the value type '{group_name, cell_names}':",
            "",
            "1. {group_A, [cell_1, cell_2, cell_3]}",
            "2. {group_B, [cell_4, cell_5]}",
            "3. {group_C, [cell_6, cell_7, cell_8]}",
            "4. {group_D, [cell_9]}",
            "5. {group_E, [cell_10, cell_11]}",
            "6. {group_F, [cell_12, cell_13, cell_14, cell_15]}",
            "7. {group_G, [cell_16, cell_17]}",
            "8. {group_H, [cell_18, cell_19]}",
            "9. {group_I, [cell_20, cell_21, cell_22]}",
            "10. {group_J, [cell_23]}"
        ],
        "final_commands": [
            "```",
            "set_area_group group_A {cell_1 cell_2 cell_3}",
            "set_area_group group_B {cell_4 cell_5}",
            "set_area_group group_C {cell_6 cell_7 cell_8}",
            "set_area_group group_D {cell_9}",
            "set_area_group group_E {cell_10 cell_11}",
            "set_area_group group_F {cell_12 cell_13 cell_14 cell_15}",
            "set_area_group group_G {cell_16 cell_17}",
            "set_area_group group_H {cell_18 cell_19}",
            "set_area_group group_I {cell_20 cell_21 cell_22}",
            "set_area_group group_J {cell_23}",
            "```"
        ]
    },
    {
        "command": "set_global_optimization",
        "description": "Enables or tunes global optimization features that cross module boundaries.",
        "value_type": "{bool}",
        "constraint_type": "Timing",
        "syntax": "set_global_optimization <enable>",
        "query": "Given the following TCL file, optimize for minimal area by enabling global optimization features that cross module boundaries.\n",
        "ppa_constraint": "minimal area",
        "query_examples": [
            "1. set_global_optimization(true)",
            "2. set_global_optimization(false)",
            "3. set_global_optimization(true)",
            "4. set_global_optimization(false)",
            "5. set_global_optimization(true)",
            "6. set_global_optimization(false)",
            "7. set_global_optimization(true)",
            "8. set_global_optimization(false)",
            "9. set_global_optimization(true)",
            "10. set_global_optimization(false)"
        ],
        "final_commands": [
            "1. set_global_optimization(true)",
            "2. set_global_optimization(false)",
            "3. set_global_optimization(true)",
            "4. set_global_optimization(false)",
            "5. set_global_optimization(true)",
            "6. set_global_optimization(false)",
            "7. set_global_optimization(true)",
            "8. set_global_optimization(false)",
            "9. set_global_optimization(true)",
            "10. set_global_optimization(false)"
        ]
    },
    {
        "command": "set_max_area",
        "description": "Specifies the maximum allowable area.",
        "value_type": "{float}",
        "constraint_type": "Optimization",
        "syntax": "set_max_area <area_value>",
        "query": "Given the following TCL file, optimize for low power consumption by setting the maximum allowable area to {float}.",
        "ppa_constraint": "low power consumption",
        "query_examples": [
            "1. set_max_area: 10.5",
            "2. set_max_area: 20.1",
            "3. set_max_area: 15.3",
            "4. set_max_area: 30.7",
            "5. set_max_area: 25.0",
            "6. set_max_area: 12.8",
            "7. set_max_area: 18.6",
            "8. set_max_area: 22.4",
            "9. set_max_area: 28.2",
            "10. set_max_area: 14.9"
        ],
        "final_commands": [
            "Here are the TCL commands using the syntax 'set_max_area <area_value>':",
            "",
            "1. set_max_area 10.5",
            "2. set_max_area 20.1",
            "3. set_max_area 15.3",
            "4. set_max_area 30.7",
            "5. set_max_area 25.0",
            "6. set_max_area 12.8",
            "7. set_max_area 18.6",
            "8. set_max_area 22.4",
            "9. set_max_area 28.2",
            "10. set_max_area 14.9"
        ]
    },
    {
        "command": "set_max_fanout",
        "description": "Specifies the maximum allowable fanout per gate.",
        "value_type": "{int, (instance_name)}",
        "constraint_type": "Optimization",
        "syntax": "set_max_fanout <fanout_value> [instance_name]",
        "query": "Given the following TCL file, optimize for minimal area by setting the maximum allowable fanout per gate to {int} for the instance {instance_name}.",
        "ppa_constraint": "minimal area",
        "query_examples": [
            "Sure! Here are 10 examples for the command 'set_max_fanout' with values of type '{int, (instance_name)}':",
            "",
            "1. set_max_fanout 10",
            "2. set_max_fanout 5",
            "3. set_max_fanout (cpu_inst)",
            "4. set_max_fanout (gpu_inst)",
            "5. set_max_fanout 8",
            "6. set_max_fanout (disk_inst)",
            "7. set_max_fanout (network_inst)",
            "8. set_max_fanout (memory_inst)",
            "9. set_max_fanout 3",
            "10. set_max_fanout (sensor_inst)"
        ],
        "final_commands": [
            "Sure! Here are the TCL commands for the given examples:",
            "",
            "1. ```set_max_fanout 10```",
            "2. ```set_max_fanout 5```",
            "3. ```set_max_fanout cpu_inst```",
            "4. ```set_max_fanout gpu_inst```",
            "5. ```set_max_fanout 8```",
            "6. ```set_max_fanout disk_inst```",
            "7. ```set_max_fanout network_inst```",
            "8. ```set_max_fanout memory_inst```",
            "9. ```set_max_fanout 3```",
            "10. ```set_max_fanout sensor_inst```"
        ]
    },
    {
        "command": "set_max_capacitance",
        "description": "Specifies the maximum capacitance on a net.",
        "value_type": "{float}",
        "constraint_type": "Optimization",
        "syntax": "set_max_capacitance <capacitance_value>",
        "query": "Given the following TCL file, optimize for high performance by specifying the maximum capacitance on a net to be {float} picofarads.",
        "ppa_constraint": "high performance",
        "query_examples": [
            "Sure! Here are 10 different example values for the command 'set_max_capacitance' with a value type of {float}:",
            "",
            "1. set_max_capacitance(4.5)",
            "2. set_max_capacitance(6.8)",
            "3. set_max_capacitance(3.2)",
            "4. set_max_capacitance(9.1)",
            "5. set_max_capacitance(5.7)",
            "6. set_max_capacitance(2.4)",
            "7. set_max_capacitance(7.3)",
            "8. set_max_capacitance(1.8)",
            "9. set_max_capacitance(10.0)",
            "10. set_max_capacitance(6.2)"
        ],
        "final_commands": [
            "set_max_capacitance 4.5",
            "set_max_capacitance 6.8",
            "set_max_capacitance 3.2",
            "set_max_capacitance 9.1",
            "set_max_capacitance 5.7",
            "set_max_capacitance 2.4",
            "set_max_capacitance 7.3",
            "set_max_capacitance 1.8",
            "set_max_capacitance 10.0",
            "set_max_capacitance 6.2"
        ]
    },
    {
        "command": "set_min_capacitance",
        "description": "Sets the minimum capacitance requirements for a net.",
        "value_type": "{float}",
        "constraint_type": "Optimization",
        "syntax": "set_min_capacitance <capacitance_value>",
        "query": "Given the following TCL file, optimize for high performance by setting the minimum capacitance requirements for the net to {float} pF.",
        "ppa_constraint": "high performance",
        "query_examples": [
            "1. set_min_capacitance = 0.5",
            "2. set_min_capacitance = 0.75",
            "3. set_min_capacitance = 1.0",
            "4. set_min_capacitance = 2.25",
            "5. set_min_capacitance = 0.3",
            "6. set_min_capacitance = 1.5",
            "7. set_min_capacitance = 0.8",
            "8. set_min_capacitance = 2.0",
            "9. set_min_capacitance = 1.2",
            "10. set_min_capacitance = 3.5"
        ],
        "final_commands": [
            "1. set_min_capacitance 0.5",
            "2. set_min_capacitance 0.75",
            "3. set_min_capacitance 1.0",
            "4. set_min_capacitance 2.25",
            "5. set_min_capacitance 0.3",
            "6. set_min_capacitance 1.5",
            "7. set_min_capacitance 0.8",
            "8. set_min_capacitance 2.0",
            "9. set_min_capacitance 1.2",
            "10. set_min_capacitance 3.5"
        ]
    },
    {
        "command": "set_timing_derate",
        "description": "Derates timing by a certain factor to account for variations.",
        "value_type": "{float}",
        "constraint_type": "Optimization",
        "syntax": "set_timing_derate <factor>",
        "query": "Given the following TCL file, optimize for low power consumption by setting the timing derate factor to {float}.",
        "ppa_constraint": "low power consumption",
        "query_examples": [
            "Here are 10 example values for the command 'set_timing_derate' with value type '{float}':",
            "",
            "1. set_timing_derate 1.5",
            "2. set_timing_derate 0.8",
            "3. set_timing_derate 2.3",
            "4. set_timing_derate 0.6",
            "5. set_timing_derate 1.2",
            "6. set_timing_derate 3.0",
            "7. set_timing_derate 0.4",
            "8. set_timing_derate 1.8",
            "9. set_timing_derate 2.5",
            "10. set_timing_derate 0.9"
        ],
        "final_commands": [
            "set_timing_derate 1.5  ",
            "set_timing_derate 0.8  ",
            "set_timing_derate 2.3  ",
            "set_timing_derate 0.6  ",
            "set_timing_derate 1.2  ",
            "set_timing_derate 3.0  ",
            "set_timing_derate 0.4  ",
            "set_timing_derate 1.8  ",
            "set_timing_derate 2.5  ",
            "set_timing_derate 0.9  "
        ]
    },
    {
        "command": "set_cost_priority",
        "description": "Prioritizes certain areas of the design when balancing constraints.",
        "value_type": "{priority_level}",
        "constraint_type": "Optimization",
        "syntax": "set_cost_priority <priority_level>",
        "query": "Given the following TCL file, optimize for minimal area by setting the cost priority to {priority_level}.",
        "ppa_constraint": "minimal area",
        "query_examples": [
            "1. set_cost_priority: {1}",
            "2. set_cost_priority: {2}",
            "3. set_cost_priority: {3}",
            "4. set_cost_priority: {4}",
            "5. set_cost_priority: {5}",
            "6. set_cost_priority: {6}",
            "7. set_cost_priority: {7}",
            "8. set_cost_priority: {8}",
            "9. set_cost_priority: {9}",
            "10. set_cost_priority: {10}"
        ],
        "final_commands": [
            "1. set_cost_priority 1",
            "2. set_cost_priority 2",
            "3. set_cost_priority 3",
            "4. set_cost_priority 4",
            "5. set_cost_priority 5",
            "6. set_cost_priority 6",
            "7. set_cost_priority 7",
            "8. set_cost_priority 8",
            "9. set_cost_priority 9",
            "10. set_cost_priority 10"
        ]
    },
    {
        "command": "disable_cost_function",
        "description": "Turns off cost functions to focus on other optimization goals.",
        "value_type": "{None}",
        "constraint_type": "Optimization",
        "syntax": "disable_cost_function",
        "query": "Given the following TCL file, optimize for high performance by turning off cost functions using the disable_cost_function command.",
        "ppa_constraint": "high performance",
        "query_examples": [
            "1. disable_cost_function: None",
            "2. disable_cost_function: None",
            "3. disable_cost_function: None",
            "4. disable_cost_function: None",
            "5. disable_cost_function: None",
            "6. disable_cost_function: None",
            "7. disable_cost_function: None",
            "8. disable_cost_function: None",
            "9. disable_cost_function: None",
            "10. disable_cost_function: None"
        ],
        "final_commands": [
            "1. disable_cost_function: None",
            "```tcl",
            "disable_cost_function",
            "```",
            "",
            "2. disable_cost_function: None",
            "```tcl",
            "disable_cost_function",
            "```",
            "",
            "3. disable_cost_function: None",
            "```tcl",
            "disable_cost_function",
            "```",
            "",
            "4. disable_cost_function: None",
            "```tcl",
            "disable_cost_function",
            "```",
            "",
            "5. disable_cost_function: None",
            "```tcl",
            "disable_cost_function",
            "```",
            "",
            "6. disable_cost_function: None",
            "```tcl",
            "disable_cost_function",
            "```",
            "",
            "7. disable_cost_function: None",
            "```tcl",
            "disable_cost_function",
            "```",
            "",
            "8. disable_cost_function: None",
            "```tcl",
            "disable_cost_function",
            "```",
            "",
            "9. disable_cost_function: None",
            "```tcl",
            "disable_cost_function",
            "```",
            "",
            "10. disable_cost_function: None",
            "```tcl",
            "disable_cost_function",
            "```"
        ]
    },
    {
        "command": "set_leakage_optimization",
        "description": "Specifies optimization targets for leakage power.",
        "value_type": "{bool}",
        "constraint_type": "Optimization",
        "syntax": "set_leakage_optimization <enable>",
        "query": "Given the following TCL file, optimize for minimal area by specifying that leakage power optimization is {boolean}.",
        "ppa_constraint": "minimal area",
        "query_examples": [
            "1. set_leakage_optimization: true",
            "2. set_leakage_optimization: false",
            "3. set_leakage_optimization: true",
            "4. set_leakage_optimization: false",
            "5. set_leakage_optimization: true",
            "6. set_leakage_optimization: true",
            "7. set_leakage_optimization: false",
            "8. set_leakage_optimization: true",
            "9. set_leakage_optimization: false",
            "10. set_leakage_optimization: false"
        ],
        "final_commands": [
            "1. set_leakage_optimization true",
            "2. set_leakage_optimization false",
            "3. set_leakage_optimization true",
            "4. set_leakage_optimization false",
            "5. set_leakage_optimization true",
            "6. set_leakage_optimization true",
            "7. set_leakage_optimization false",
            "8. set_leakage_optimization true",
            "9. set_leakage_optimization false",
            "10. set_leakage_optimization false"
        ]
    },
    {
        "command": "set_dynamic_optimization",
        "description": "Enables dynamic optimization features during synthesis.",
        "value_type": "{bool}",
        "constraint_type": "Optimization",
        "syntax": "set_dynamic_optimization <enable>",
        "query": "Given the following TCL file, optimize for low power consumption by enabling dynamic optimization features during synthesis.",
        "ppa_constraint": "low power consumption",
        "query_examples": [
            "Sure! Here are 10 different example values for the command 'set_dynamic_optimization' with value type {bool}:",
            "",
            "1. set_dynamic_optimization: true",
            "2. set_dynamic_optimization: false",
            "3. set_dynamic_optimization: true",
            "4. set_dynamic_optimization: false",
            "5. set_dynamic_optimization: true",
            "6. set_dynamic_optimization: false",
            "7. set_dynamic_optimization: true",
            "8. set_dynamic_optimization: false",
            "9. set_dynamic_optimization: true",
            "10. set_dynamic_optimization: false",
            "",
            "These values can be used to enable or disable dynamic optimization in a system or software environment."
        ],
        "final_commands": [
            "Here are TCL commands for the examples you provided:",
            "",
            "1. set_dynamic_optimization true",
            "2. set_dynamic_optimization false",
            "3. set_dynamic_optimization true",
            "4. set_dynamic_optimization false",
            "5. set_dynamic_optimization true",
            "6. set_dynamic_optimization false",
            "7. set_dynamic_optimization true",
            "8. set_dynamic_optimization false",
            "9. set_dynamic_optimization true",
            "10. set_dynamic_optimization false"
        ]
    },
    {
        "command": "set_multi_vth_constraint",
        "description": "Specifies the usage of different threshold voltages for optimization.",
        "value_type": "{voltage_thresholds}",
        "constraint_type": "Optimization",
        "syntax": "set_multi_vth_constraint <voltage_thresholds>",
        "query": "Given the following TCL file, optimize for high performance by specifying the usage of different threshold voltages {voltage_thresholds} for the optimization.",
        "ppa_constraint": "high performance",
        "query_examples": [
            "Sure! Here are 10 different example values for the command 'set_multi_vth_constraint' with the value type '{voltage_thresholds}':",
            "",
            "1. set_multi_vth_constraint constraint_1 {0.7, 1.2, 1.5}",
            "2. set_multi_vth_constraint constraint_2 {1.0, 1.3, 1.8}",
            "3. set_multi_vth_constraint constraint_3 {0.8, 1.4, 1.6}",
            "4. set_multi_vth_constraint constraint_4 {0.9, 1.1, 1.7}",
            "5. set_multi_vth_constraint constraint_5 {1.1, 1.5, 1.9}",
            "6. set_multi_vth_constraint constraint_6 {0.6, 1.0, 1.3}",
            "7. set_multi_vth_constraint constraint_7 {0.7, 1.3, 1.8}",
            "8. set_multi_vth_constraint constraint_8 {0.9, 1.2, 1.4}",
            "9. set_multi_vth_constraint constraint_9 {1.2, 1.4, 1.6}",
            "10. set_multi_vth_constraint constraint_10 {0.8, 1.0, 1.6}",
            "",
            "These values represent different voltage threshold constraints that can be set using the 'set_multi_vth_constraint' command."
        ],
        "final_commands": [
            "1. set_multi_vth_constraint constraint_1 {0.7, 1.2, 1.5}",
            "2. set_multi_vth_constraint constraint_2 {1.0, 1.3, 1.8}",
            "3. set_multi_vth_constraint constraint_3 {0.8, 1.4, 1.6}",
            "4. set_multi_vth_constraint constraint_4 {0.9, 1.1, 1.7}",
            "5. set_multi_vth_constraint constraint_5 {1.1, 1.5, 1.9}",
            "6. set_multi_vth_constraint constraint_6 {0.6, 1.0, 1.3}",
            "7. set_multi_vth_constraint constraint_7 {0.7, 1.3, 1.8}",
            "8. set_multi_vth_constraint constraint_8 {0.9, 1.2, 1.4}",
            "9. set_multi_vth_constraint constraint_9 {1.2, 1.4, 1.6}",
            "10. set_multi_vth_constraint constraint_10 {0.8, 1.0, 1.6}"
        ]
    },
    {
        "command": "set_auto_disable_drc_nets",
        "description": "Automatically disables DRC for certain nets to improve synthesis outcomes.",
        "value_type": "{condition}",
        "constraint_type": "Optimization",
        "syntax": "set_auto_disable_drc_nets <condition>",
        "query": "Given the following TCL file, optimize for minimal area by automatically disabling DRC for nets that meet the {condition}.",
        "ppa_constraint": "minimal area",
        "query_examples": [
            "Sure! Here are 10 examples of values for the command 'set_auto_disable_drc_nets':",
            "",
            "1. set_auto_disable_drc_nets {condition: pin_count > 100}",
            "2. set_auto_disable_drc_nets {condition: net_length > 10 mm}",
            "3. set_auto_disable_drc_nets {condition: signal_type == 'power'}",
            "4. set_auto_disable_drc_nets {condition: net_width < 0.5 mm}",
            "5. set_auto_disable_drc_nets {condition: trace_spacing > 0.2 mm}",
            "6. set_auto_disable_drc_nets {condition: via_count > 5}",
            "7. set_auto_disable_drc_nets {condition: net_impedance < 50 ohms}",
            "8. set_auto_disable_drc_nets {condition: differential_pairs == true}",
            "9. set_auto_disable_drc_nets {condition: net_signals_overlap == true}",
            "10. set_auto_disable_drc_nets {condition: paired_nets_distance > 5 mm}"
        ],
        "final_commands": [
            "```tcl",
            "set_auto_disable_drc_nets {condition: pin_count > 100}",
            "set_auto_disable_drc_nets {condition: net_length > 10 mm}",
            "set_auto_disable_drc_nets {condition: signal_type == 'power'}",
            "set_auto_disable_drc_nets {condition: net_width < 0.5 mm}",
            "set_auto_disable_drc_nets {condition: trace_spacing > 0.2 mm}",
            "set_auto_disable_drc_nets {condition: via_count > 5}",
            "set_auto_disable_drc_nets {condition: net_impedance < 50 ohms}",
            "set_auto_disable_drc_nets {condition: differential_pairs == true}",
            "set_auto_disable_drc_nets {condition: net_signals_overlap == true}",
            "set_auto_disable_drc_nets {condition: paired_nets_distance > 5 mm}",
            "```"
        ]
    },
    {
        "command": "set_cell_degradation",
        "description": "Adjusts the cell degradation parameters for aging effects.",
        "value_type": "{parameters}",
        "constraint_type": "Optimization",
        "syntax": "set_cell_degradation <parameters>",
        "query": "Given the following TCL file, optimize for high performance by adjusting the cell degradation parameters to {parameters}.",
        "ppa_constraint": "high performance",
        "query_examples": [
            "Sure! Here are 10 example values for the command 'set_cell_degradation':",
            "",
            "1. set_cell_degradation {enzyme_concentration}",
            "2. set_cell_degradation {temperature}",
            "3. set_cell_degradation {ph}",
            "4. set_cell_degradation {substrate_concentration}",
            "5. set_cell_degradation {time}",
            "6. set_cell_degradation {oxygen_level}",
            "7. set_cell_degradation {inhibitor_concentration}",
            "8. set_cell_degradation {growth_medium}",
            "9. set_cell_degradation {internal_ph}",
            "10. set_cell_degradation {cell_density}"
        ],
        "final_commands": [
            "set_cell_degradation {enzyme_concentration}",
            "set_cell_degradation {temperature}",
            "set_cell_degradation {ph}",
            "set_cell_degradation {substrate_concentration}",
            "set_cell_degradation {time}",
            "set_cell_degradation {oxygen_level}",
            "set_cell_degradation {inhibitor_concentration}",
            "set_cell_degradation {growth_medium}",
            "set_cell_degradation {internal_ph}",
            "set_cell_degradation {cell_density}"
        ]
    },
    {
        "command": "set_power_optimization",
        "description": "Enables or configures various power optimization techniques such as gate resizing, Vt swapping, or power gating.",
        "value_type": "{bool}",
        "constraint_type": "Optimization",
        "syntax": "set_power_optimization <enable>",
        "query": "Given the following TCL file, optimize for low power consumption by enabling power optimization techniques.",
        "ppa_constraint": "low power consumption",
        "query_examples": [
            "Sure! Here are 10 example values for the command 'set_power_optimization' with a value type of '{bool}':",
            "",
            "1. set_power_optimization: true",
            "2. set_power_optimization: false",
            "3. set_power_optimization: true",
            "4. set_power_optimization: false",
            "5. set_power_optimization: true",
            "6. set_power_optimization: false",
            "7. set_power_optimization: true",
            "8. set_power_optimization: false",
            "9. set_power_optimization: true",
            "10. set_power_optimization: false"
        ],
        "final_commands": [
            "set_power_optimization true",
            "set_power_optimization false",
            "set_power_optimization true",
            "set_power_optimization false",
            "set_power_optimization true",
            "set_power_optimization false",
            "set_power_optimization true",
            "set_power_optimization false",
            "set_power_optimization true",
            "set_power_optimization false"
        ]
    },
    {
        "command": "set_area_group",
        "description": "Defines area constraints for specific groups of cells to control placement density or meet floorplanning requirements.",
        "value_type": "{group_name, cell_names}",
        "constraint_type": "Optimization",
        "syntax": "set_area_group <group_name> <cell_names>",
        "query": "Given the following TCL file, optimize for minimal area by defining an area group named {group_name} for the cells {cell_name_list}.",
        "ppa_constraint": "minimal area",
        "query_examples": [
            "Sure! Here are 10 different example values for the command 'set_area_group':",
            "",
            "1. Group Name: \"Living Room\", Cell Names: [\"A1\", \"A2\", \"B1\"]",
            "2. Group Name: \"Kitchen\", Cell Names: [\"C1\", \"C2\", \"D1\"]",
            "3. Group Name: \"Bedroom\", Cell Names: [\"E1\", \"E2\", \"F1\"]",
            "4. Group Name: \"Study\", Cell Names: [\"G1\", \"G2\", \"H1\"]",
            "5. Group Name: \"Dining Room\", Cell Names: [\"I1\", \"I2\", \"J1\"]",
            "6. Group Name: \"Bathroom\", Cell Names: [\"K1\", \"K2\", \"L1\"]",
            "7. Group Name: \"Guest Room\", Cell Names: [\"M1\", \"M2\", \"N1\"]",
            "8. Group Name: \"Playroom\", Cell Names: [\"O1\", \"O2\", \"P1\"]",
            "9. Group Name: \"Home Office\", Cell Names: [\"Q1\", \"Q2\", \"R1\"]",
            "10. Group Name: \"Outdoor Patio\", Cell Names: [\"S1\", \"S2\", \"T1\"]"
        ],
        "final_commands": [
            "```tcl",
            "set_area_group \"Living Room\" {\"A1\" \"A2\" \"B1\"}",
            "set_area_group \"Kitchen\" {\"C1\" \"C2\" \"D1\"}",
            "set_area_group \"Bedroom\" {\"E1\" \"E2\" \"F1\"}",
            "set_area_group \"Study\" {\"G1\" \"G2\" \"H1\"}",
            "set_area_group \"Dining Room\" {\"I1\" \"I2\" \"J1\"}",
            "set_area_group \"Bathroom\" {\"K1\" \"K2\" \"L1\"}",
            "set_area_group \"Guest Room\" {\"M1\" \"M2\" \"N1\"}",
            "set_area_group \"Playroom\" {\"O1\" \"O2\" \"P1\"}",
            "set_area_group \"Home Office\" {\"Q1\" \"Q2\" \"R1\"}",
            "set_area_group \"Outdoor Patio\" {\"S1\" \"S2\" \"T1\"}",
            "```"
        ]
    },
    {
        "command": "set_global_optimization",
        "description": "Enables or tunes global optimization features that cross module boundaries.",
        "value_type": "{bool}",
        "constraint_type": "Optimization",
        "syntax": "set_global_optimization <enable>",
        "query": "Given the following TCL file, optimize for low power consumption by enabling global optimization features that cross module boundaries.",
        "ppa_constraint": "low power consumption",
        "query_examples": [
            "1. set_global_optimization: true",
            "2. set_global_optimization: false",
            "3. set_global_optimization: true",
            "4. set_global_optimization: false",
            "5. set_global_optimization: true",
            "6. set_global_optimization: false",
            "7. set_global_optimization: true",
            "8. set_global_optimization: false",
            "9. set_global_optimization: true",
            "10. set_global_optimization: false"
        ],
        "final_commands": [
            "Here are the TCL commands generated using the provided examples:",
            "",
            "1. `set_global_optimization true`",
            "2. `set_global_optimization false`",
            "3. `set_global_optimization true`",
            "4. `set_global_optimization false`",
            "5. `set_global_optimization true`",
            "6. `set_global_optimization false`",
            "7. `set_global_optimization true`",
            "8. `set_global_optimization false`",
            "9. `set_global_optimization true`",
            "10. `set_global_optimization false`"
        ]
    }
]